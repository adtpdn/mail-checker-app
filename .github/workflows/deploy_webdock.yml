name: Deploy to Webdock

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deployment_note:
        description: 'Deployment notes'
        required: false
        default: 'Manual deployment'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.WEBDOCK_SSH_PRIVATE_KEY }}
          
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "Host *
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null" > ~/.ssh/config
          chmod 600 ~/.ssh/config
      
      - name: Get current date
        id: date
        run: echo "DEPLOY_DATE=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
      
      - name: Deploy via Git
        env:
          WEBDOCK_SERVER: ${{ secrets.WEBDOCK_SERVER }}
          WEBDOCK_USERNAME: ${{ secrets.WEBDOCK_USERNAME }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH || '~/mail-checker' }}
          DEPLOY_DATE: ${{ steps.date.outputs.DEPLOY_DATE }}
          DEPLOY_USER: ${{ github.actor }}
          GIT_REPO: ${{ github.server_url }}/${{ github.repository }}
          GIT_BRANCH: ${{ github.ref_name }}
        run: |
          # Execute deployment script on server
          echo "Setting up Git-based deployment..."
          ssh ${WEBDOCK_USERNAME}@${WEBDOCK_SERVER} << EOF
            # Set default deployment path to user's home directory if not specified
            DEPLOY_DIR=\$(eval echo ${DEPLOY_PATH})
            echo "Deploying to: \$DEPLOY_DIR"
            
            # Create directory if it doesn't exist and initialize git repo if needed
            mkdir -p \$DEPLOY_DIR
            
            # Backup .env file if it exists
            if [ -f \$DEPLOY_DIR/.env ]; then
              echo "Backing up .env file..."
              cp \$DEPLOY_DIR/.env \$DEPLOY_DIR/.env.backup
            fi
            
            # Go to deployment directory
            cd \$DEPLOY_DIR
            
            # Initialize git repo if it doesn't exist
            if [ ! -d .git ]; then
              echo "Initializing git repository..."
              git init
              git config --local user.email "deployment@mail-checker.app"
              git config --local user.name "Deployment Bot"
              # Add GitHub as origin
              git remote add origin ${GIT_REPO} || git remote set-url origin ${GIT_REPO}
            fi
            
            # Fetch latest code
            echo "Fetching latest code..."
            git fetch --depth=1 origin ${GIT_BRANCH}
            
            # Reset to match remote
            echo "Resetting to match remote branch..."
            git reset --hard origin/${GIT_BRANCH}
            
            # Restore .env file if it exists
            if [ -f \$DEPLOY_DIR/.env.backup ]; then
              echo "Restoring .env file..."
              cp \$DEPLOY_DIR/.env.backup \$DEPLOY_DIR/.env
              rm \$DEPLOY_DIR/.env.backup
            else
              echo "Creating new .env file..."
              echo "NODE_ENV=production" > \$DEPLOY_DIR/.env
              echo "PORT=3000" >> \$DEPLOY_DIR/.env
            fi
            
            # Update deployment information
            echo "Updating deployment info..."
            echo "DEPLOY_TIMESTAMP=${DEPLOY_DATE}" >> \$DEPLOY_DIR/.env
            echo "DEPLOY_USER=${DEPLOY_USER}" >> \$DEPLOY_DIR/.env
            
            # Install dependencies
            echo "Installing dependencies..."
            npm install --production
            
            # Start or reload application
            echo "Starting/reloading application..."
            if pm2 list | grep -q "mail-checker"; then
              pm2 reload mail-checker --update-env
            else
              pm2 start server.js --name mail-checker
              pm2 save
            fi
            
            echo "Deployment completed at ${DEPLOY_DATE}"
          EOF