name: Deploy to Webdock

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deployment_note:
        description: 'Deployment notes'
        required: false
        default: 'Manual deployment'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.WEBDOCK_SSH_PRIVATE_KEY }}
          
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "Host *
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null" > ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Prepare deployment
        env:
          WEBDOCK_SERVER: ${{ secrets.WEBDOCK_SERVER }}
          WEBDOCK_USERNAME: ${{ secrets.WEBDOCK_USERNAME }}
          DEPLOY_PATH: ${{ secrets.WEBDOCK_DEPLOY_PATH || '/home/webdock/mail-checker' }}
        run: |
          # Check if we can access the deployment directory and create it if needed
          ssh ${WEBDOCK_USERNAME}@${WEBDOCK_SERVER} "mkdir -p ${DEPLOY_PATH}"
          
          # Backup .env file if it exists
          ssh ${WEBDOCK_USERNAME}@${WEBDOCK_SERVER} "if [ -f ${DEPLOY_PATH}/.env ]; then cp ${DEPLOY_PATH}/.env ${DEPLOY_PATH}/.env.backup; echo 'Environment file backed up'; else echo 'No environment file found to back up'; fi"
          
          echo "Deployment preparation complete"

      - name: Deploy code to Webdock
        env:
          WEBDOCK_SERVER: ${{ secrets.WEBDOCK_SERVER }}
          WEBDOCK_USERNAME: ${{ secrets.WEBDOCK_USERNAME }}
          DEPLOY_PATH: ${{ secrets.WEBDOCK_DEPLOY_PATH || '/home/webdock/mail-checker' }}
        run: |
          # Deploy to server using rsync with appropriate flags
          echo "Deploying code to Webdock..."
          
          # Create necessary directories locally first
          mkdir -p public/css public/js src
          
          # Use --no-perms to avoid permission issues
          rsync -avz --exclude='.git' --exclude='.github' --exclude='node_modules' \
            --exclude='tests' --exclude='coverage' --no-perms \
            ./ ${WEBDOCK_USERNAME}@${WEBDOCK_SERVER}:${DEPLOY_PATH}/
          
          echo "Code transfer complete"

      - name: Post-deployment setup
        env:
          WEBDOCK_SERVER: ${{ secrets.WEBDOCK_SERVER }}
          WEBDOCK_USERNAME: ${{ secrets.WEBDOCK_USERNAME }}
          DEPLOY_PATH: ${{ secrets.WEBDOCK_DEPLOY_PATH || '/home/webdock/mail-checker' }}
        run: |
          DEPLOY_TIMESTAMP=$(date -u +'%Y-%m-%d %H:%M:%S UTC')
          DEPLOY_USER="${{ github.actor }}"
          
          # Execute post-deploy commands
          ssh ${WEBDOCK_USERNAME}@${WEBDOCK_SERVER} << EOF
            cd ${DEPLOY_PATH}
            
            # Restore the .env file if backup exists
            if [ -f .env.backup ]; then
              cp .env.backup .env
              rm .env.backup
              echo "Environment file restored"
            else
              # Create .env if it doesn't exist
              echo "NODE_ENV=production" > .env
              echo "PORT=3000" >> .env
            fi
            
            # Update deployment info in .env
            grep -v "DEPLOY_TIMESTAMP" .env > .env.tmp || true
            grep -v "DEPLOY_USER" .env.tmp > .env || true
            echo "DEPLOY_TIMESTAMP=${DEPLOY_TIMESTAMP}" >> .env
            echo "DEPLOY_USER=${DEPLOY_USER}" >> .env
            rm -f .env.tmp
            
            # Create necessary directories if they don't exist
            mkdir -p public/css public/js src
            
            # Install dependencies
            echo "Installing dependencies..."
            npm ci --production
            
            # Restart the application using PM2
            echo "Restarting application..."
            if pm2 list | grep -q "mail-checker"; then
              pm2 reload mail-checker --update-env
            else
              pm2 start server.js --name mail-checker
              pm2 save
            fi
            
            echo "Deployment completed at ${DEPLOY_TIMESTAMP}"
            EOF