name: Deploy to Webdock

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      deployment_note:
        description: 'Deployment notes'
        required: false
        default: 'Manual deployment'

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.WEBDOCK_SSH_PRIVATE_KEY }}
          
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh
          echo "Host *
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null" > ~/.ssh/config
          chmod 600 ~/.ssh/config

      - name: Create temporary deployment package
        run: |
          # Clean up node_modules if it exists
          rm -rf node_modules
          
          # Create a zip file of the project
          zip -r deploy.zip . -x ".git/*" ".github/*" "node_modules/*" "tests/*" "coverage/*"
      
      - name: Get current date
        id: date
        run: echo "DEPLOY_DATE=$(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_OUTPUT
      
      - name: Deploy via SSH
        env:
          WEBDOCK_SERVER: ${{ secrets.WEBDOCK_SERVER }}
          WEBDOCK_USERNAME: ${{ secrets.WEBDOCK_USERNAME }}
          DEPLOY_PATH: ${{ secrets.WEBDOCK_DEPLOY_PATH || '/home/webdock/mail-checker' }}
          DEPLOY_DATE: ${{ steps.date.outputs.DEPLOY_DATE }}
          DEPLOY_USER: ${{ github.actor }}
        run: |
          # Upload zip file to server
          echo "Uploading deployment package..."
          scp deploy.zip ${WEBDOCK_USERNAME}@${WEBDOCK_SERVER}:/tmp/
          
          # Execute deployment script on server
          echo "Deploying to server..."
          ssh ${WEBDOCK_USERNAME}@${WEBDOCK_SERVER} << EOF
            # Create a fresh deployment directory
            echo "Creating deployment directory..."
            DEPLOY_DIR="${DEPLOY_PATH}"
            
            # Create directory if it doesn't exist
            mkdir -p \$DEPLOY_DIR
            
            # Create a backup of .env if it exists
            if [ -f \$DEPLOY_DIR/.env ]; then
              echo "Backing up .env file..."
              cp \$DEPLOY_DIR/.env /tmp/.env.backup
            fi
            
            # Extract zip file to deployment directory
            echo "Extracting deployment package..."
            # Clean the directory but preserve node_modules if it exists
            if [ -d \$DEPLOY_DIR/node_modules ]; then
              mv \$DEPLOY_DIR/node_modules /tmp/node_modules
            fi
            
            # Clean the directory
            rm -rf \$DEPLOY_DIR/*
            
            # Extract the zip file
            unzip -o /tmp/deploy.zip -d \$DEPLOY_DIR
            
            # Restore node_modules if it was moved
            if [ -d /tmp/node_modules ]; then
              mv /tmp/node_modules \$DEPLOY_DIR/
            fi
            
            # Restore or create .env file
            if [ -f /tmp/.env.backup ]; then
              echo "Restoring .env file..."
              cp /tmp/.env.backup \$DEPLOY_DIR/.env
              rm /tmp/.env.backup
            else
              echo "Creating new .env file..."
              echo "NODE_ENV=production" > \$DEPLOY_DIR/.env
              echo "PORT=3000" >> \$DEPLOY_DIR/.env
            fi
            
            # Update deployment information
            echo "DEPLOY_TIMESTAMP=${DEPLOY_DATE}" >> \$DEPLOY_DIR/.env
            echo "DEPLOY_USER=${DEPLOY_USER}" >> \$DEPLOY_DIR/.env
            
            # Go to deployment directory
            cd \$DEPLOY_DIR
            
            # Install dependencies
            echo "Installing dependencies..."
            npm ci --production
            
            # Start or reload application
            echo "Starting application..."
            if pm2 list | grep -q "mail-checker"; then
              pm2 reload mail-checker --update-env
            else
              pm2 start server.js --name mail-checker
              pm2 save
            fi
            
            # Clean up
            rm /tmp/deploy.zip
            
            echo "Deployment completed at ${DEPLOY_DATE}"
            EOF